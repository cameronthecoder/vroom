/**
 * This file was generated by kysely-zod-codegen.
 * Please do not edit it manually.
 */

import { z } from "zod";

export const addressRoleSchema = z.enum(["BILLING", "CLAIM_SCENE", "GARAGING", "MAILING", "OTHER", "PHYSICAL", "REPAIR_SHOP", "TOW_YARD"]);

export const addressStatusSchema = z.enum(["ACTIVE", "ARCHIVED", "INACTIVE"]);

export const claimantRoleSchema = z.enum(["ADJUSTER", "CLAIMANT", "OTHER", "POLICE_OFFICER", "WITNESS"]);

export const claimStatusSchema = z.enum(["CLOSED", "DENIED", "IN_REVIEW", "OPEN", "SETTLED"]);

export const jsonSchema = z.object({}).catchall(z.union([z.string(), z.number(), z.boolean(), z.null(), z.array(z.any())]));

export const numericSchema = z.coerce.number();

export const policyPartyRoleSchema = z.enum(["ADDITIONAL_INSURED", "BENEFICIARY", "CONTACT", "DRIVER", "EXCLUDED", "NAMED_INSURED"]);

export const policyStatusSchema = z.enum(["ACTIVE", "CANCELLED", "INACTIVE", "PENDING"]);

export const timestampSchema = z.union([z.coerce.date(), z.string()]);

export const userRolesSchema = z.enum(["ADMIN", "AGENT", "CUSTOMER"]);

export const vehiclePartyRoleSchema = z.enum(["ADDITIONAL_DRIVER", "CONTACT", "EXCLUDED_DRIVER", "LESSEE", "LESSOR", "LIENHOLDER", "OWNER", "PRIMARY_DRIVER"]);

export const vehicleUseSchema = z.enum(["COMMERCIAL", "FARM", "PERSONAL", "RECREATIONAL"]);

export const addressesTableSchema = z.object({
  city: z.string(),
  country: z.string(),
  created_at: timestampSchema,
  id: z.uuid(),
  latitude: numericSchema.nullable(),
  line1: z.string(),
  line2: z.string().nullable(),
  longitude: numericSchema.nullable(),
  postal_code: z.string(),
  state: z.string(),
  status: addressStatusSchema,
  updated_at: timestampSchema,
})

export const claimAddressesTableSchema = z.object({
  address_id: z.string().uuid(),
  claim_id: z.string().uuid(),
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  role: addressRoleSchema,
})

export const claimPartyTableSchema = z.object({
  claim_id: z.string().uuid().nullable(),
  email: z.string().nullable(),
  id: z.string().uuid(),
  name: z.string().nullable(),
  party_type: claimantRoleSchema,
  person_id: z.string().uuid().nullable(),
  phone: z.string().nullable(),
})

export const claimsTableSchema = z.object({
  amount: numericSchema,
  coverage_snapshot: jsonSchema,
  created_at: timestampSchema,
  description: z.string().nullable(),
  id: z.string().uuid(),
  incident_at: timestampSchema,
  policy_id: z.string().uuid(),
  reported_at: timestampSchema,
  status: claimStatusSchema,
  updated_at: timestampSchema,
})

export const claimVehicleTableSchema = z.object({
  claim_id: z.string().uuid(),
  vehicle_id: z.string().uuid(),
})

export const coverageSelectionTableSchema = z.object({
  amount_cents: z.coerce.number().nullable(),
  coverage_code: z.string(),
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  id: z.string().uuid(),
  numeric_value: numericSchema.nullable(),
  policy_id: z.string().uuid(),
  vehicle_id: z.string().uuid().nullable(),
})

export const coverageTypesTableSchema = z.object({
  code: z.string(),
  description: z.string().nullable(),
  name: z.string(),
  scope: z.string(),
  unit: z.string(),
})

export const organizationsTableSchema = z.object({
  created_at: timestampSchema,
  legal_name: z.string(),
  party_id: z.string().uuid(),
  tax_id: z.string().nullable(),
  updated_at: timestampSchema,
  user_id: z.string().uuid().nullable(),
})

export const partiesTableSchema = z.object({
  created_at: timestampSchema,
  display_name: z.string(),
  id: z.string().uuid(),
  name: z.string(),
})

export const partyAddressesTableSchema = z.object({
  address_id: z.string().uuid(),
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  party_id: z.string().uuid(),
  role: addressRoleSchema,
})

export const peopleTableSchema = z.object({
  created_at: timestampSchema,
  first_name: z.string(),
  last_name: z.string(),
  license_number: z.string().nullable(),
  license_state: z.string(),
  party_id: z.string().uuid(),
  phone: z.string().nullable(),
  updated_at: timestampSchema,
  user_id: z.string().uuid().nullable(),
})

export const policiesTableSchema = z.object({
  created_at: timestampSchema,
  currency: z.string(),
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  id: z.string().uuid(),
  policy_number: z.coerce.number().nullable(),
  state: z.string(),
  status: policyStatusSchema,
  updated_at: timestampSchema,
})

export const policyAddressesTableSchema = z.object({
  address_id: z.string().uuid(),
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  policy_id: z.string().uuid(),
  role: addressRoleSchema,
})

export const policyPartiesTableSchema = z.object({
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  party_id: z.string().uuid(),
  policy_id: z.string().uuid(),
  role: policyPartyRoleSchema,
})

export const usersTableSchema = z.object({
  created_at: timestampSchema,
  email: z.string(),
  first_name: z.string(),
  id: z.string().uuid(),
  last_name: z.string(),
  password_hash: z.string(),
  roles: userRolesSchema.array(),
  updated_at: timestampSchema,
})

export const vehicleAddressesTableSchema = z.object({
  address_id: z.string().uuid(),
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  role: addressRoleSchema,
  vehicle_id: z.string().uuid(),
})

export const vehiclePartiesTableSchema = z.object({
  effective_at: timestampSchema,
  expires_at: timestampSchema,
  party_id: z.string().uuid(),
  role: vehiclePartyRoleSchema,
  vehicle_id: z.string().uuid(),
})

export const vehiclesTableSchema = z.object({
  created_at: timestampSchema,
  garaging_address: jsonSchema,
  id: z.string().uuid(),
  make: z.string(),
  model: z.string(),
  policy_id: z.string().uuid(),
  primary_use: vehicleUseSchema,
  updated_at: timestampSchema,
  vin: z.string(),
  year: z.number(),
})

export const DBSchema = z.object({
  addresses: addressesTableSchema,
  claim_addresses: claimAddressesTableSchema,
  claim_party: claimPartyTableSchema,
  claim_vehicle: claimVehicleTableSchema,
  claims: claimsTableSchema,
  coverage_selection: coverageSelectionTableSchema,
  coverage_types: coverageTypesTableSchema,
  organizations: organizationsTableSchema,
  parties: partiesTableSchema,
  party_addresses: partyAddressesTableSchema,
  people: peopleTableSchema,
  policies: policiesTableSchema,
  policy_addresses: policyAddressesTableSchema,
  policy_parties: policyPartiesTableSchema,
  users: usersTableSchema,
  vehicle_addresses: vehicleAddressesTableSchema,
  vehicle_parties: vehiclePartiesTableSchema,
  vehicles: vehiclesTableSchema,
})
